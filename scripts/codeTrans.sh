#!/usr/bin/bash

BASEDIR=$(dirname "$0")
source $BASEDIR/config.sh --source-only

genCompileCommand() {
    TestFile=$1
    ProgramDir=$2
    sed -e "s|\${MutantHome}|$programDir|g" -e "s|\${CSMITH_PATH}|$CSMITH_PATH|g" -e "s|\${TestFile}|$TestFile|g" $SDHOME/misc/compile_commands.json
}

testOneProgram() {
    programName=$1
    programName=`readlink -f $programName`
    programDir=`dirname $programName`
    cd $programDir

    #run sseq
    echo "genCompileCommand $programName $programDir > $programDir/compile_commands.json"
    genCompileCommand $programName $programDir > $programDir/compile_commands.json
    echo "running timeout 20 $SSEQ $programName div %any% mut 2>1"
    res=`timeout 20 $SSEQ $programName div %any% mut 2>1`
    exit_status=$?
    # if sseq failed, we skip this file
    if [ $exit_status -eq 124 ]; then
        echo "sseq command timeout for $programName div print"
        echo "sseq command timeout for $programName div print" >> $OUTPUTFILE
        return -1
    fi

}


ProgressBar() {
    # Process data
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
    # Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

    # 1.2 Build progressbar strings and print the ProgressBar line
    # 1.2.1 Output example:
    # 1.2.1.1 Progress : [########################################] 100%
    printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%\n"

}

testing() {
    echo "======starting=====" >> $OUTPUTFILE
    cd $MutantHome
    res=`find $MutantHome -type f \( -name "*.c" -o -name "*.cpp" \)`
    totalNum=`echo "$res" | wc -l`
    number=1
    while read filename
    do
        # we ignore files ends with _test.c, since it is an instrumented file generated by our tool.
        if [[ $filename == *_test.c || $filename == *_test.cpp ]]; then
            ((number++))
            continue
        fi
        if [[ $filename == *_div.c || $filename == *_div.cpp ]]; then
            ((number++))
            continue
        fi
        if [[ $filename == *_print.c || $filename == *_print.cpp ]]; then
            ((number++))
            continue
        fi
        if [[ $filename == *_fp1.c || $filename == *_fp1.cpp ]]; then
            ((number++))
            continue
        fi

        testOneProgram "$filename"
        ProgressBar ${number} ${totalNum}
        ((number++))
    done <<< "$res"
}

init() {
    cd $MutantHome
    res=`find $MutantHome -type f \( -name "*.c" -o -name "*.cpp" \)`
    while read filename
    do
        if [[ $filename == *_div.c || $filename == *_div.cpp ]]; then
            rm "$filename"
        fi
    done <<< "$res"
}

replace() {
    cd "$MutantHome"
    res=$(find "$MutantHome" -type f \( -name "*.c" -o -name "*.cpp" \))
    
    while read -r filename; do
        if [[ $filename == *_div.c ]]; then
            target="${filename/_div.c/.c}"
            cat "$filename" > "$target"
            rm "$filename"
        elif [[ $filename == *_div.cpp ]]; then
            target="${filename/_div.cpp/.cpp}"
            cat "$filename" > "$target"
            rm "$filename"
        fi
    done <<< "$res"

    rm $MutantHome/compile_commands.json
    rm $MutantHome/result.txt
    rm $MutantHome/1

}

replace2() {
    cd "$MutantHome" || exit
    res=$(find "$MutantHome" -type f \( -name "*.c" -o -name "*.cpp" \))
    
    while read -r filename; do
        base_name=$(basename "$filename")
        file_prefix="${base_name%.*}"  # 获取文件名（去掉路径和扩展名）
        
        sed -i "s/SaniTestArr/${file_prefix}_SaniTestArr/g" "$filename"
        sed -i "s/SaniCatcher/${file_prefix}_SaniCatcher/g" "$filename"
        sed -i -E "s/printIntLine\(([^;]*,[^;]*)\);/int t=(\1);\nprintIntLine(t);/g" "$filename"
        
    done <<< "$res"
}


if [ "${1}" != "--source-only"  ]; then
    # init
    testing
    replace
    # replace2
    #testOneProgram /home/sd/SanitizerDector/mutants/results/mutantsfiles/a.c
    #testOneProgram /home/sd/SanitizerDector/mutants/mutants241216/mutated_1_tmpkro_pbdo.c
    # testOneProgram /home/sd/SanitizerDector/juliet_dataset/C/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_01.c
fi




